# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
    # 1. for Github split
    GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
    packages_split:
        runs-on: ubuntu-latest

        strategy:
            fail-fast: false
            matrix:
                # define package to repository map
                package:
                    -
                        local_path: 'demo-react-native'
                        split_repository: 'demo-react-native'
                    -
                        local_path: 'demo-react-vite'
                        split_repository: 'demo-react-vite'
                    -
                        local_path: 'demo-taro-react'
                        split_repository: 'demo-taro-react'

        steps:
            -   uses: actions/checkout@v4
                with:
                    token: ${{ secrets.GITHUB_TOKEN }}
                    fetch-depth: 0

            -   name: Configure Git and directories
                run: |
                    # 配置 Git 安全目录
                    git config --global --add safe.directory /github/workspace
                    git config --global --add safe.directory /tmp/monorepo_split/build_directory
                    git config --global --add safe.directory /tmp/monorepo_split/clone_directory
                    
                    # 设置目录权限
                    mkdir -p /tmp/monorepo_split/clone_directory
                    mkdir -p /tmp/monorepo_split/build_directory
                    chmod -R 777 /tmp/monorepo_split

                    # 测试克隆命令
                    echo "git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/mlzgldr/${{ matrix.package.split_repository }}.git /tmp/monorepo_split/clone_directory"
                    git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/mlzgldr/${{ matrix.package.split_repository }}.git /tmp/monorepo_split/clone_directory

                    echo "检出clone_directory代码"
                    cd /tmp/monorepo_split/clone_directory
                    git fetch

                    # 修改分支检查逻辑
                    if ! git rev-parse --verify --quiet ${{ github.ref_name }}; then
                        echo "创建新分支 ${{ github.ref_name }}"
                        git checkout -b ${{ github.ref_name }}
                        echo "推送新分支 git push origin ${{ github.ref_name }}"
                        git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/mlzgldr/${{ matrix.package.split_repository }}.git
                        git push origin ${{ github.ref_name }}
                    else
                        git checkout ${{ github.ref_name }}
                    fi

                    echo "复制.git文件到build_directory"
                    mkdir -p /tmp/monorepo_split/build_directory/.git
                    cp -r /tmp/monorepo_split/clone_directory/.git /tmp/monorepo_split/build_directory/

                    rm -rf /tmp/monorepo_split/clone_directory

                    echo "复制package内容到build_directory"
                    cp -ra ${{ github.workspace }}/packages/${{ matrix.package.local_path }}/. /tmp/monorepo_split/build_directory/

                    echo "build_directory里的内容:"
                    ls -la /tmp/monorepo_split/build_directory

                    COMMIT_MSG=$(git show -s --format=%B ${{ github.sha }})
                    echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV

                    cd /tmp/monorepo_split/build_directory
          
                    # Check for changes
                    git status
                    git status --porcelain > /tmp/changes.txt
                    
                    if [ -s /tmp/changes.txt ]; then
                        echo "Adding changes..."
                        git add .
                        
                        echo "Committing changes..."
                        git commit --message "$COMMIT_MSG"
                        
                        echo "Pushing changes..."
                        git push --quiet origin ${{ github.ref_name }}
                    else
                        echo "No files to change"
                    fi

                    rm -rf /tmp/monorepo_split



