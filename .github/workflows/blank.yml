# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
    # 1. for Github split
    GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
    packages_split:
        runs-on: windows-latest

        strategy:
            fail-fast: false
            matrix:
                # define package to repository map
                package:
                    -
                        local_path: 'demo-react-native'
                        split_repository: 'demo-react-native'
                    -
                        local_path: 'demo-react-vite'
                        split_repository: 'demo-react-vite'
                    -
                        local_path: 'demo-taro-react'
                        split_repository: 'demo-taro-react'

        steps:
            -   uses: actions/checkout@v4
                with:
                    token: ${{ secrets.GITHUB_TOKEN }}
                    fetch-depth: 0

            -   name: Install GitHub CLI
                run: |
                    winget install GitHub.cli
                    $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

            -   name: Configure Git and directories
                run: |
                    # 配置 Git 安全目录
                    git config --global --add safe.directory /github/workspace
                    git config --global --add safe.directory D:/tmp/monorepo_split/build_directory
                    git config --global --add safe.directory D:/tmp/monorepo_split/clone_directory

                    git config user.name "mlzgldr"
                    git config user.email "mlzgldr@163.com"
                    
                    # 重置所有 Git 认证配置
                    git config --global --unset credential.helper
                    git config --global --unset credential.useHttpPath
                    git config --global --unset credential.https://github.com.username
                    git config --global --unset credential.https://github.com.password
                    git config --global --unset credential.https://github.com.token
                    
                    # 设置目录权限
                    New-Item -ItemType Directory -Force -Path "D:/tmp/monorepo_split/clone_directory"
                    New-Item -ItemType Directory -Force -Path "D:/tmp/monorepo_split/build_directory"
                    icacls "D:/tmp/monorepo_split" /grant Everyone:F /T

                    # 保存初始目录
                    $INITIAL_DIR = Get-Location

                    # 设置环境变量
                    $env:GIT_TERMINAL_PROMPT = 0
                    $env:GIT_ASKPASS = "echo"
                    $env:GIT_USERNAME = "mlzgldr"
                    $env:GIT_TOKEN = "${{ secrets.GITHUB_TOKEN }}"

                    # 使用 GitHub CLI 进行认证
                    echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
                    
                    # 使用 token 设置远程 URL
                    git remote set-url origin "https://${{ secrets.GITHUB_TOKEN }}@github.com/mlzgldr/${{ matrix.package.split_repository }}.git"
                    git push origin ${{ github.ref_name }}

                    # 测试克隆命令
                    echo "克隆仓库"
                    git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/mlzgldr/${{ matrix.package.split_repository }}.git D:/tmp/monorepo_split/clone_directory

                    echo "检出clone_directory代码"
                    Set-Location D:/tmp/monorepo_split/clone_directory
                    git config user.name "mlzgldr"
                    git config user.email "mlzgldr@163.com"
                    git fetch

                    # 修改分支检查逻辑
                    $branchExists = git ls-remote --heads origin ${{ github.ref_name }} | Select-String -Pattern ${{ github.ref_name }}
                    if ($branchExists) {
                        echo "检出已存在的分支 ${{ github.ref_name }}"
                        git checkout -b ${{ github.ref_name }} origin/${{ github.ref_name }}
                    } else {
                        echo "创建新分支 ${{ github.ref_name }}"
                        git checkout -b ${{ github.ref_name }}
                        
                        # 创建一个初始提交
                        echo "# ${{ matrix.package.split_repository }}" > README.md
                        git add README.md
                        git commit -m "Initial commit"
                        
                        Get-ChildItem D:/tmp/monorepo_split/clone_directory
                        echo "推送新分支 git push origin ${{ github.ref_name }}"
                        git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/mlzgldr/${{ matrix.package.split_repository }}.git
                        git push origin ${{ github.ref_name }}
                    }

                    echo "复制.git文件到build_directory"
                    New-Item -ItemType Directory -Force -Path "D:/tmp/monorepo_split/build_directory/.git"
                    Copy-Item -Path "D:/tmp/monorepo_split/clone_directory/.git/*" -Destination "D:/tmp/monorepo_split/build_directory/.git" -Recurse

                    # 返回到初始目录
                    Set-Location $INITIAL_DIR

                    # 清理克隆目录
                    Remove-Item -Path "D:/tmp/monorepo_split/clone_directory" -Recurse -Force

                    echo "复制package内容到build_directory"
                    Copy-Item -Path "${{ github.workspace }}/packages/${{ matrix.package.local_path }}/*" -Destination "D:/tmp/monorepo_split/build_directory" -Recurse

                    echo "build_directory里的内容:"
                    Get-ChildItem D:/tmp/monorepo_split/build_directory

                    $COMMIT_MSG = git show -s --format=%B ${{ github.sha }}

                    Set-Location D:/tmp/monorepo_split/build_directory

                    # 显示所有分支
                    echo "当前仓库的所有分支："
                    git branch -a
          
                    # 重新设置 Git 用户信息
                    git config user.name "mlzgldr"
                    git config user.email "mlzgldr@163.com"

                    # Check for changes
                    git status
                    git status --porcelain > D:/tmp/changes.txt
                    
                    if (Test-Path D:/tmp/changes.txt -PathType Leaf) {
                        echo "添加变更"
                        git add .
                        
                        echo "提交变更"
                        git commit --message "$COMMIT_MSG"
                        
                        echo "推送修改"
                        git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/mlzgldr/${{ matrix.package.split_repository }}.git
                        git push origin ${{ github.ref_name }}
                    } else {
                        echo "没有变更"
                    }

                    # 返回到初始目录
                    Set-Location $INITIAL_DIR

                    # 清理临时目录
                    Remove-Item -Path "D:/tmp/monorepo_split" -Recurse -Force



